1.
What happens when you initialize a repository? Why do you need to do it?

How is the staging area different from the working directory and the repository?
What value do you think it offers?

How can you use the staging area to make sure you have one commit per logical
change?

What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
 the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges 
manually?


.Git directory is created. To be able to use git on a file we need to initialise it as a repository. Staging area is basically like clipboard we can put things on it that we'd like to commit in one go. Just use one file with change in staging area


2.
How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area is the place where you could put files you have made changes to and want to place under one commit logic wise. Essentially it allows us to specify what we want to commit.



3.
How can you use the staging area to make sure you have one commit per logical change?

Add only one file/change in one commit for staging area


4.
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Useful for experiments, and for doing something that breaks everything and reconstructs


5.
How do the diagrams help you visualize the branch structure?
Visualising helps in keeping track of the branch/commit you're on and tracing a path to and back to another commit or branch via checkout command.

6.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Two branches become one with changes of both trajectories by various users. Diagram representation is to keep track of changes and where we are and tracing of our steps to and back.

7.
What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

Automatic merging can lead to conglomerate outputs and loss of logic. Manual maybe slightly tedious but is more efficient as the conflicts in the same palce are highlighted for the user to eliminate
